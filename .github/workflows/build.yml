name: Build and Publish NuGet Package

on:
  push:
    branches: [ main ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set RocksDB version
      run: |
        ROCKSDBVNUM=$(cat rocksdbversion)
        echo "ROCKSDBVERSION=${ROCKSDBVNUM}" >> $GITHUB_ENV
      working-directory: ${{ github.workspace }}

    - name: Build RocksDB
      run: ./build-rocksdb.sh
      working-directory: ${{ github.workspace }}/build-native/

    - name: Verify Build Output
      run: |
        if [ ! -f ${{ github.workspace }}/build-native/runtimes/linux-x64/native/librocksdb.so ]; then
          echo "librocksdb.so not found!"
          exit 1
        fi
        ldd ${{ github.workspace }}/build-native/runtimes/linux-x64/native/librocksdb.so

    - name: Upload Linux Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-native-libs
        path: ${{ github.workspace }}/build-native/runtimes/linux-x64/native/librocksdb.so
        retention-days: 7

  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Visual Studio Environment
      uses: microsoft/setup-msbuild@v1.1
    
    - name: Install Windows Dependencies
      shell: powershell
      run: |
        choco install -h
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install git
        refreshenv
    
    - name: Set RocksDB version
      shell: bash
      run: |
        ROCKSDBVNUM=$(cat rocksdbversion)
        echo "ROCKSDBVERSION=${ROCKSDBVNUM}" >> $GITHUB_ENV
      working-directory: ${{ github.workspace }}

    - name: Build RocksDB
      shell: cmd
      run: |
        if exist "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\vsdevcmd.bat" (
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\vsdevcmd.bat" -arch=x64
        ) else (
          call "C:\Program Files\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\vsdevcmd.bat" -arch=x64
        )
        bash build-rocksdb.sh
        if %ERRORLEVEL% NEQ 0 (
          echo "Build failed!"
          exit /b %ERRORLEVEL%
        )
      working-directory: ${{ github.workspace }}/build-native/

    - name: Verify Build Output
      shell: powershell
      run: |
        $dllPath = "${{ github.workspace }}\build-native\runtimes\win-x64\native\rocksdb.dll"
        if (-not (Test-Path $dllPath)) {
          Write-Error "rocksdb.dll not found!"
          exit 1
        }
        Get-Item $dllPath | Select-Object Length, LastWriteTime

    - name: Upload Windows Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-native-libs
        path: ${{ github.workspace }}/build-native/runtimes/win-x64/native/rocksdb.dll
        retention-days: 7

  build-macos:
    runs-on: macos-latest
    env:
      HOMEBREW_CELLAR: /usr/local/Cellar
    steps:
    - uses: actions/checkout@v4

    - name: Set RocksDB version
      run: |
        ROCKSDBVNUM=$(cat rocksdbversion)
        echo "ROCKSDBVERSION=${ROCKSDBVNUM}" >> $GITHUB_ENV
      working-directory: ${{ github.workspace }}

    - name: Build RocksDB
      run: ./build-rocksdb.sh
      working-directory: ${{ github.workspace }}/build-native/

    - name: Update dylib dependencies
      working-directory: ${{ github.workspace }}/build-native/runtimes/osx-x64/native/
      run: |
        if [ ! -f librocksdb.dylib ]; then
          echo "librocksdb.dylib not found!"
          exit 1
        fi
        
        otool -L librocksdb.dylib
        
        SNAPPY_PATH=$(brew --prefix snappy)/lib/libsnappy.dylib
        ZSTD_PATH=$(brew --prefix zstd)/lib/libzstd.dylib
        LZ4_PATH=$(brew --prefix lz4)/lib/liblz4.dylib
        ZLIB_PATH=$(brew --prefix zlib)/lib/libz.dylib
        
        install_name_tool -change "@rpath/libsnappy.1.dylib" "@loader_path/libsnappy.dylib" librocksdb.dylib
        install_name_tool -change "@rpath/libzstd.1.dylib" "@loader_path/libzstd.dylib" librocksdb.dylib
        install_name_tool -change "@rpath/libz.1.dylib" "@loader_path/libz.dylib" librocksdb.dylib
        install_name_tool -change "@rpath/liblz4.1.dylib" "@loader_path/liblz4.dylib" librocksdb.dylib
        
        otool -L librocksdb.dylib

    - name: Copy Dependencies
      run: |
        mkdir -p ${{ github.workspace }}/native-libs/osx-x64/
        
        cp ${{ github.workspace }}/build-native/runtimes/osx-x64/native/librocksdb.dylib ${{ github.workspace }}/native-libs/osx-x64/
        
        cp "$(brew --prefix zlib)/lib/libz.dylib" ${{ github.workspace }}/native-libs/osx-x64/
        cp "$(brew --prefix lz4)/lib/liblz4.dylib" ${{ github.workspace }}/native-libs/osx-x64/
        cp "$(brew --prefix snappy)/lib/libsnappy.dylib" ${{ github.workspace }}/native-libs/osx-x64/
        cp "$(brew --prefix zstd)/lib/libzstd.dylib" ${{ github.workspace }}/native-libs/osx-x64/
        
        ls -la ${{ github.workspace }}/native-libs/osx-x64/

    - name: Upload macOS Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-native-libs
        path: ${{ github.workspace }}/native-libs/osx-x64/
        retention-days: 7

  build-nuget:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set RocksDB version
      run: |
        ROCKSDBVNUM=$(cat rocksdbversion)
        echo "ROCKSDBVERSION=${ROCKSDBVNUM}.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
        echo "ROCKSDBVERSIONBASE=${ROCKSDBVNUM}" >> $GITHUB_ENV
      working-directory: ${{ github.workspace }}
      
    - name: Setup .NET 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x'
        
    - name: Download and extract RocksDB native libraries
      run: |
        mkdir /tmp/rocksdbjar
        cd /tmp/rocksdbjar
        wget https://repo1.maven.org/maven2/org/rocksdb/rocksdbjni/${{ env.ROCKSDBVERSIONBASE }}/rocksdbjni-${{ env.ROCKSDBVERSIONBASE }}.jar
        unzip rocksdbjni-${{ env.ROCKSDBVERSIONBASE }}.jar
        ls -hR
        mv librocksdbjni-osx-arm64.jnilib ${{ github.workspace }}/csharp/runtimes/osx-arm64/native/librocksdb.dylib
        mv librocksdbjni-linux-aarch64.so ${{ github.workspace }}/csharp/runtimes/linux-arm64/native/librocksdb.so
        mv librocksdbjni-linux-aarch64.so ${{ github.workspace }}/csharp/runtimes/linux-arm64/native/librocksdb-musl.so
        mv librocksdbjni-osx-x86_64.jnilib ${{ github.workspace }}/csharp/runtimes/osx-x64/native/librocksdb.dylib
        mv librocksdbjni-linux64.so ${{ github.workspace }}/csharp/runtimes/linux-x64/native/librocksdb.so
        mv librocksdbjni-linux64-musl.so ${{ github.workspace }}/csharp/runtimes/linux-x64/native/librocksdb-musl.so
        ls ${{ github.workspace }} -hR
        cd -

    - name: Download Linux Artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-native-libs
        path: ${{ github.workspace }}/csharp/runtimes/linux-x64/native/

    - name: Download Windows Artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-native-libs
        path: ${{ github.workspace }}/csharp/runtimes/win-x64/native/

    - name: Download macOS Artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-native-libs
        path: ${{ github.workspace }}/csharp/runtimes/osx-x64/native/

    - name: Run Code Generator
      run: dotnet run --project ${{ github.workspace }}/build-codegen/CSharpGen.csproj
      working-directory: ${{ github.workspace }}/build-codegen/

    - name: Build Project
      run: dotnet build ${{ github.workspace }}/csharp/RocksDbSharp.csproj -c Release /p:Version=${{ env.ROCKSDBVERSION }} /p:AllowUnsafeBlocks=True /p:LangVersion=latest
      working-directory: ${{ github.workspace }}/csharp/

    - name: Pack NuGet
      run: dotnet pack ${{ github.workspace }}/csharp/RocksDbSharp.csproj --no-build -c Release

    - name: Push NuGet Package
      run: dotnet nuget push **/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
